config.tx_extbase {
		persistence {
				classes {
						Tx_Extbase_Domain_Model_FrontendUser {
								subclasses {
										Tx_Ajaxlogin_Domain_Model_User = Tx_Ajaxlogin_Domain_Model_User
								}
						}
						Tx_Extbase_Domain_Model_FrontendUserGroup {
								subclasses {
										Tx_Ajaxlogin_Domain_Model_UserGroup = Tx_Ajaxlogin_Domain_Model_UserGroup
								}
						}
						Tx_Ajaxlogin_Domain_Model_User {
								mapping {
										tableName = fe_users
										columns {
											crdate.mapOnProperty = crdate
											tx_ajaxlogin_forgotHash.mapOnProperty = forgotHash
											tx_ajaxlogin_verificationHash.mapOnProperty = verificationHash
											tx_ajaxlogin_forgotHashValid.mapOnProperty = forgotHashValid
										}
								}
						}
						Tx_Ajaxlogin_Domain_Model_UserGroup {
								mapping {
										tableName = fe_groups
								}
						}
						Tx_Ajaxlogin_Domain_Model_Country {
								mapping {
										tableName = static_countries
										columns {
												cn_short_en.mapOnProperty = cnShortEn
										}
								}
						}
				}
		}
}

plugin.tx_ajaxlogin {
	settings {
		widgetTypeNum = {$plugin.tx_ajaxlogin.settings.widgetTypeNum}
		defaultUserGroups = {$plugin.tx_ajaxlogin.settings.defaultUserGroups}
		# Groups after the user confirmed by click in email link
		defaultUserGroupsAfterConfirmation = {$plugin.tx_ajaxlogin.settings.defaultUserGroupsAfterConfirmation}
		# Groups after an admin approved the user
		defaultUserGroupsAfterVerification = {$plugin.tx_ajaxlogin.settings.defaultUserGroupsAfterVerification}
		validation {
			User {
				name {
					pattern = {$plugin.tx_ajaxlogin.settings.validation.User.name.pattern}
					message  = {$plugin.tx_ajaxlogin.settings.validation.User.name.message}
				}
				# Currently not used (but extbase default email-address validator)
				email {
					pattern = {$plugin.tx_ajaxlogin.settings.validation.User.email.pattern}
					message  = {$plugin.tx_ajaxlogin.settings.validation.User.email.message}
				}
				username {
					pattern = {$plugin.tx_ajaxlogin.settings.validation.User.username.pattern}
					message  = {$plugin.tx_ajaxlogin.settings.validation.User.username.message}
				}
				password {
					pattern = {$plugin.tx_ajaxlogin.settings.validation.User.password.pattern}
					message = {$plugin.tx_ajaxlogin.settings.validation.User.password.message}
				}
			}
			passwordMinLength = 8
		}
		notificationMail {
			sender = {$plugin.tx_ajaxlogin.settings.notificationMail.sender}
			emailAddress = {$plugin.tx_ajaxlogin.settings.notificationMail.emailAddress}
		}
		actionPid {
			login = {$plugin.tx_ajaxlogin.settings.actionPid.login}
			show = {$plugin.tx_ajaxlogin.settings.actionPid.show}
			signUp = {$plugin.tx_ajaxlogin.settings.actionPid.signUp}
			edit = {$plugin.tx_ajaxlogin.settings.actionPid.edit}
			editPassword = {$plugin.tx_ajaxlogin.settings.actionPid.editPassword}
			closeAccount = {$plugin.tx_ajaxlogin.settings.actionPid.closeAccount}
			enableAccount = {$plugin.tx_ajaxlogin.settings.actionPid.enableAccount}
			activateAccount = {$plugin.tx_ajaxlogin.settings.actionPid.activateAccount}
		}

		page.passwordChangeSuccess = {$plugin.tx_ajaxlogin.settings.page.passwordChangeSuccess}
	}
	persistence {
			storagePid = {$plugin.tx_ajaxlogin.persistence.storagePid}
	}
	features {
		rewrittenPropertyMapper = 1
	}
	view {
		templateRootPath = {$plugin.tx_ajaxlogin.view.templateRootPath}
		partialRootPath = {$plugin.tx_ajaxlogin.view.partialRootPath}
		layoutRootPath = {$plugin.tx_ajaxlogin.view.layoutRootPath}
	}
}

module.tx_ajaxlogin < plugin.tx_ajaxlogin

tx_ajaxlogin_widget = PAGE
tx_ajaxlogin_widget {
	typeNum = {$plugin.tx_ajaxlogin.settings.widgetTypeNum}
	config.disableAllHeaderCode = 1
	config.stat = 0

	10 < tt_content.list.20.ajaxlogin_widget
	10 = USER_INT
}

page.jsInline.98987 = COA
page.jsInline.98987 {
	10 = COA
	10 {
		10 = COA
		10 {
			5.stdWrap.preCObject = TEXT
			5.stdWrap.preCObject {
				value < config.absRefPrefix
				override < config.baseURL
			}

			10 = TEXT
			10 {
				typolink.parameter = {$plugin.tx_ajaxlogin.settings.ajaxPid}
				#typolink.forceAbsoluteUrl = 1
				typolink.additionalParams.cObject = COA
				typolink.additionalParams.cObject {
					10 = TEXT
					10.value = info
					10.wrap = &tx_ajaxlogin_widget[action]=|
					20 = TEXT
					20.value = User
					20.wrap = &tx_ajaxlogin_widget[controller]=|
					30 = TEXT
					30.value = {$plugin.tx_ajaxlogin.settings.widgetTypeNum}
					30.wrap = &type=|
				}
				typolink.returnLast = url
				wrap = info:'|'
			}

			20 < .10
			20 {
				typolink.additionalParams.cObject.10.value = login
				wrap = ,login:'|'
			}

			30 < .10
			30 {
				typolink.additionalParams.cObject.10.value = authenticate
				wrap = ,authenticate:'|'
			}

			40 < .10
			40 {
				typolink.additionalParams.cObject.10.value = logout
				wrap = ,logout:'|'
			}

			50 < .10
			50 {
				typolink.additionalParams.cObject.10.value = new
				wrap = ,'new':'|'
			}

			60 < .10
			60 {
				typolink.additionalParams.cObject.10.value = create
				wrap = ,create:'|'
			}

			70 < .10
			70 {
				typolink.additionalParams.cObject.10.value = forgotPassword
				wrap = ,forgotPassword:'|'
			}

			80 < .10
			80 {
				typolink.additionalParams.cObject.10.value = resetPassword
				wrap = ,resetPassword:'|'
			}

			wrap = User:{|}
		}

		wrap = api:{|}
	}

	20 = TEXT
	20.value = #ajaxlogin
	20.wrap = ,placeholder: '|'

	30 = TEXT
	30.value = {$plugin.tx_ajaxlogin.persistence.storagePid}
	30.wrap = ,storagePid:|

	40 = TEXT
	40.value = #login-status
	40.wrap = ,statusLabel:'|'

	50 = TEXT
	50.value = #tx-ajaxlogin-editPassword
	50.wrap = ,editPasswordForm:'|'

	60 = TEXT
	60.value = .tx-ajaxlogin-profile
	60.wrap = ,profileSection:'|'

	70 = COA
	70 {
		10 = TEXT
		10.data = LLL:EXT:ajaxlogin/Resources/Private/Language/locallang.xml:status_authenticated
		10.wrap = status_authenticated:'|'

		20 = TEXT
		20.data = LLL:EXT:ajaxlogin/Resources/Private/Language/locallang.xml:status_unauthorized
		20.wrap = ,status_unauthorized:'|'

		30 = TEXT
		30.data = LLL:EXT:ajaxlogin/Resources/Private/Language/locallang.xml:status_loading
		30.wrap = ,status_loading:'|'

		wrap = ,ll:{|}
	}

	80 = COA
	80 {
		10 = COA
		10 {
			10 = TEXT
			10.value = {$plugin.tx_ajaxlogin.settings.validation.User.username.pattern}
			10.wrap = username:|

			20 = TEXT
			20.value = {$plugin.tx_ajaxlogin.settings.validation.User.password.pattern}
			20.wrap = ,password:|

			wrap = User:{|}
		}

		20 = COA
		20 {
			10 = COA
			10 {
				10 = TEXT
				10 {
					value = #tx-ajaxlogin-user-password
					wrap = '|'
				}

				20 = TEXT
				20 {
					value = #tx-ajaxlogin-password-check
					wrap = ,'|'
				}

				wrap = [|]
			}

			20 = COA
			20 {
				10 = TEXT
				10 {
					value = #tx-ajaxlogin-user-email
					wrap = '|'
				}

				20 = TEXT
				20 {
					value = #tx-ajaxlogin-email-check
					wrap = ,'|'
				}

				wrap = ,[|]
			}

			wrap = ,confirmationFieldsets:[|]
		}

		wrap = ,validation:{|}
	}

	90 = TEXT
	90.value = 0
	90.wrap = ,doReloadOnSuccess:|

	100 = TEXT
	100.typolink.parameter = {$plugin.tx_ajaxlogin.settings.actionPid.login}
	100.typolink.forceAbsoluteUrl = 1
	100.typolink.returnLast = url
	100.wrap = ,loginPage:'|'

	110 = TEXT
	110.typolink.parameter = {$plugin.tx_ajaxlogin.settings.actionPid.show}
	110.typolink.forceAbsoluteUrl = 1
	110.typolink.returnLast = url
	110.wrap = ,accountPage:'|'

	120 = TEXT
	120.typolink.parameter = {$plugin.tx_ajaxlogin.settings.actionPid.signUp}
	120.typolink.forceAbsoluteUrl = 1
	120.typolink.returnLast = url
	120.wrap = ,signUpPage:'|'

	wrap = var tx_ajaxlogin = {|};
}

page.jsInline.98988 = TEXT
page.jsInline.98988.value (
	if ("https:" == document.location.protocol) {
		jQuery.each(tx_ajaxlogin.api.User , function(index,item) { tx_ajaxlogin.api.User[index] = item.replace(/http:/, 'https:'); });
		jQuery.each(tx_ajaxlogin , function(index,item) { if (typeof tx_ajaxlogin[index] != 'string') return; tx_ajaxlogin[index] = item.replace(/http:/, 'https:'); });
	}
)

page.includeJSFooter.tx-ajaxlogin = EXT:ajaxlogin/Resources/Public/JavaScript/Ajaxlogin.js

page.footerData.98987 = COA
page.footerData.98987 {
	10 = TEXT
	10.value = var tx_ajaxlogin = tx_ajaxlogin || {};

	20 = TEXT
	20.data =	levelfield : -1, tx_ajaxlogin_sectionreload, slide
	20.stdWrap.prioriCalc = intval
	20.wrap = tx_ajaxlogin.doReloadOnSuccess=|;

	wrap = <script type="text/javascript">|</script>
}
